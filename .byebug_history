Role.unscoped.where(provider: args[:provider]).select(:id, :name, :provider).includes(:role_permissions).where.not(name: COMMON[:filtered_roles]).where("provider != 'greenlight' AND (name != 'admin' OR name != 'user')").to_sql
Role.unscoped.where(provider: args[:provider]).select(:id, :name, :provider).includes(:role_permissions).where.not(name: COMMON[:filtered_roles]).where("provider != 'greenlight' AND (name != 'admin' OR name != 'user')")
Role.unscoped.where(provider: args[:provider]).select(:id, :name, :provider).includes(:role_permissions).where.not(name: COMMON[:filtered_roles]).where("provider != 'greenlight' OR name != 'admin' OR name != 'user'")
Role.unscoped.where(provider: args[:provider]).select(:id, :name, :provider).includes(:role_permissions).where.not(name: COMMON[:filtered_roles]).where("provider != 'greenlight' or name != 'admin'")
Role.unscoped.where(provider: args[:provider]).select(:id, :name, :provider).includes(:role_permissions).where.not(name: COMMON[:filtered_roles]).where("provider != 'greenlight' AND name != 'admin'")
Role.unscoped.where(provider: args[:provider]).select(:id, :name, :provider).includes(:role_permissions).where.not(name: COMMON[:filtered_roles]).where.not(name: 'user')
Role.unscoped.where(provider: args[:provider]).select(:id, :name, :provider).includes(:role_permissions).where.not(name: COMMON[:filtered_roles]).where.not(provider: 'greenlight', name: 'user')
Role.unscoped.where(provider: args[:provider]).select(:id, :name, :provider).includes(:role_permissions).where.not(name: COMMON[:filtered_roles]).where("provider != 'greenlight' AND name != 'admin' OR name != 'user'")
Role.unscoped.where(provider: args[:provider]).select(:id, :name, :provider).includes(:role_permissions).where.not(name: COMMON[:filtered_roles]).where("provider != 'greenlight' AND name != 'admin'")
Role.unscoped.where(provider: args[:provider]).select(:id, :name, :provider).includes(:role_permissions).where.not(name: COMMON[:filtered_roles]).where("provider != 'greenlight' AND name != 'admin'").where("provider != 'greenlight' AND name != 'user'")
Role.unscoped.where(provider: args[:provider]).select(:id, :name, :provider).includes(:role_permissions).where.not(name: COMMON[:filtered_roles]).where("provider != 'greenlight' AND name != 'admin'").or("provider != 'greenlight' AND name != 'user'")
Role.unscoped.where(provider: args[:provider]).select(:id, :name, :provider).includes(:role_permissions).where.not(name: COMMON[:filtered_roles]).where("provider != 'greenlight' AND name != 'admin' OR name != 'user'")
Role.unscoped.where(provider: args[:provider]).select(:id, :name, :provider).includes(:role_permissions).where.not(name: COMMON[:filtered_roles]).where("provider != 'greenlight' AND name != 'admin' OR name != 'user'").to_sql
Role.unscoped.where(provider: args[:provider]).select(:id, :name, :provider).includes(:role_permissions).where.not(name: COMMON[:filtered_roles]).where("name != 'admin' OR name != 'user' AND provider != 'greenlight'").to_sql
Role.unscoped.where(provider: args[:provider]).select(:id, :name, :provider).includes(:role_permissions).where.not(name: COMMON[:filtered_roles]).where("name != 'admin' OR name != 'user' AND provider != 'greenlight'")
exit
Role.unscoped.where(provider: args[:provider]).select(:id, :name, :provider).includes(:role_permissions).where.not(name: COMMON[:filtered_roles]).where.not(name: COMMON[:filtered_greenlight_roles], provider: "greenlight").to_sql
Role.unscoped.where(provider: args[:provider]).select(:id, :name, :provider).includes(:role_permissions).where.not(name: COMMON[:filtered_roles]).where("name != 'admin' OR name != 'user' AND provider != 'greenlight'")
Role.unscoped.where(provider: args[:provider]).select(:id, :name, :provider).includes(:role_permissions).where.not(name: COMMON[:filtered_roles]).where.not(name: COMMON[:filtered_greenlight_roles]).where.not(provider: "greenlight")
Role.unscoped.where(provider: args[:provider]).select(:id, :name, :provider).includes(:role_permissions).where.not(name: COMMON[:filtered_roles]).where.not(name: COMMON[:filtered_greenlight_roles].where.not(provider: "greenlight")
Role.unscoped.where(provider: args[:provider]).select(:id, :name, :provider).includes(:role_permissions).where.not(name: COMMON[:filtered_roles]).where.not(name: COMMON[:filtered_greenlight_roles], provider: "greenlight").to_sql
Role.unscoped.where(provider: args[:provider]).select(:id, :name, :provider).includes(:role_permissions).where.not(name: COMMON[:filtered_roles]).where.not('roles.name': COMMON[:filtered_greenlight_roles], 'roles.provider': 'greenlight')
Role.unscoped.where(provider: args[:provider]).select(:id, :name, :provider).includes(:role_permissions).where.not(name: COMMON[:filtered_roles]).where.not('roles.name': COMMON[:filtered_greenlight_roles])
Role.unscoped.where(provider: args[:provider]).select(:id, :name, :provider).includes(:role_permissions).where.not(name: COMMON[:filtered_roles]).where.not(name: COMMON[:filtered_greenlight_roles])
Role.unscoped.where(provider: args[:provider]).select(:id, :name, :provider).includes(:role_permissions).where.not(name: COMMON[:filtered_roles]).where.not(name: COMMON[:filtered_greenlight_roles], provider: "greenlight")
Role.unscoped.where(provider: args[:provider]).select(:id, :name, :provider).includes(:role_permissions).where.not(name: COMMON[:filtered_roles])
exit
Role.unscoped.where(provider: args[:provider]).select(:id, :name).includes(:role_permissions).where.not(name: COMMON[:filtered_roles])
Role.unscoped.where(provider: args[:provider]).select(:id, :name).includes(:role_permissions)
Role.unscoped.where(provider: args[:provider]).select(:id, :name)
Role.unscoped.where(provider: args[:provider]).count
Role.unscoped.where(provider: args[:provider])
c
response = Net::HTTP.post(uri('users'), payload(params), COMMON[:headers])
args
