# This is a sample of the environment variables you will need
# To use, copy this file to .env `cp sample.env .env`


# For production only

# RAILS_ENV=production

# Create a secret key for rails
#
# You can generate a secure one through the Greenlight docker image
# with with the command
#
#   docker run --rm bigbluebutton/greenlight rake secret
#
# SECRET_KEY_BASE=


# For either developent or production

# Enter credentials for your BigBlueButton Server
#
# The endpoint and secret from your bigbluebutton server.  To get these values, run
# the following command on your BigBlueButton server
#
#    bbb-conf --secret
#
# and uncomment the following two variables
# BIGBLUEBUTTON_ENDPOINT=http://test-install.blindsidenetworks.com/bigbluebutton/
# BIGBLUEBUTTON_SECRET=8cd8ef52e8e101574e400365b55e11a6

# Twitter Login Provider (optional)
#
#   You will need to register the app at https://apps.twitter.com/
#   For the callback URL use 'http://<your hostname:port>/auth/twitter/callback'
#   Once registered copy the ID and Secret here
#
# TWITTER_ID=
# TWITTER_SECRET=

# Google Login Provider (optional)
#
#   You will need to register for at https://console.developers.google.com/apis/credentials
#   Select Oauth client ID -> web application
#   For the callback URL use 'http://<your hostname:port>/auth/google/callback'
#   Once registered copy the ID and Secret here
#
#   The GOOGLE_OAUTH2_HD variable is used to limit sign-in to a particular Google Apps hosted domain. This
#   can be a string such as, 'domain.com'. If left blank, GreenLight will allow sign-in from all Google Apps hosted
#   domains.
#
# GOOGLE_OAUTH2_ID=
# GOOGLE_OAUTH2_SECRET=
# GOOGLE_OAUTH2_HD=

# LDAP Login Provider (optional)
#
#   You can enable LDAP authentication by providing values for the variables below.
#   For information about setting up LDAP, see:
#     http://docs.bigbluebutton.org/install/green-light.html#ldap-oauth
#
# LDAP_SERVER=
# LDAP_PORT=
# LDAP_METHOD=
# LDAP_UID=
# LDAP_BASE=
# LDAP_BIND_DN=
# LDAP_PASSWORD=

# SAML2 Login Provider (optional)
#
#   You can use SAML authentication by providing the values below.
#   SAML_ISSUER is the name of your application. Some identity providers might need this to establish the identity of the service provider requesting the login.
#     For example : https://bigbluebutton.yourdomain.tld/auth/saml/metadata
#   SAML_IDP_URL is the URL to which the authentication request should be sent. This would be on the identity provider. It can be found in the
#     IDP's metadata in the <md:SingleSignOnService> tag
#   SAML_IDP_CERT is the certificate used by the IDP, for example "-----BEGIN CERTIFICATE-----\n...-----END CERTIFICATE-----"
#
#   The information about this SP can be found on your server http://example.com/auth/saml/metadata
#
# SAML_ISSUER=
# SAML_IDP_URL=
# SAML_IDP_CERT=
# SAML_NAME_IDENTIFIER=
# SAML_UID_ATTRIBUTE=

# If "true", GreenLight will register a webhook callback for each meeting
# created. This callback is called for all events that happen in the meeting,
# including the processing of its recording. These events are used to update
# the web page dynamically as things happen in the server.
# If not "true", the application will add a metadata to the meetings with this same
# callback URL. Scripts can then be added to BigBlueButton to call this callback
# URL and send specific events to GreenLight (e.g. a post publish script to warn
# the application when recordings are done).
# GREENLIGHT_USE_WEBHOOKS=true

# Enable uploading to Youtube (optional)
#
#   When this is enabled, users will be able to directly upload their recordings
#   to Youtube. If you plan to enable this, you should follow the steps outlined
#   in our docs for setting up the Youtube data API.
#
#   http://docs.bigbluebutton.org/install/green-light.html#8-enabling-uploading-to-youtube-optional
#
# ENABLE_YOUTUBE_UPLOADING=false

# Slack Integration (optional)
#
#   You will need to register an incoming-webhook for your slack channel
#   in order for GreenLight to post to it. You can do this by going
#   to https://slack.com/apps/A0F7XDUAZ-incoming-webhooks, selecting your
#   team and then selecting "Add Incoming WebHooks integration" on the
#   desired channel. You will then need to paste the webhook below.
#
# SLACK_WEBHOOK=
# SLACK_CHANNEL=

# Landing Background (optional)
#
#   Supply a URL to an image to change the landing background. If no
#   URL is provided GreenLight will use a default image. If you
#   supply a path that does not lead to an image, no landing image
#   will appear.
#
# LANDING_BACKGROUND=

# SMTP Mailer (optional)
#
# GREENLIGHT_MAIL_NOTIFICATIONS=true
# In the format [localhost.localdomain]
# GREENLIGHT_DOMAIN=localhost
# SMTP_FROM=youremail@gmail.com
# SMTP_SERVER=smtp.gmail.com
# SMTP_PORT=587
# SMTP_DOMAIN=gmail.com
# SMTP_USERNAME=youremail@gmail.com
# SMTP_PASSWORD=yourpassword
# SMTP_TLS=false
# SMTP_AUTH=login
# SMTP_STARTTLS_AUTO=true

# Enable QR Code generation (optional)
#
#   When this is enabled, users will be able to generate a QR code for direct access
#   to a meeting room that can be shared as the URL link.
#
# ENABLE_QRCODE_GENERATION=false


# Prefix for the application's root URL
# Useful for deploying the application to a subdirectory
#
#   default is '/b' (recommended)
#
# RELATIVE_URL_ROOT=/b

# Uncomment and set to 'true' to only allow users to create meetings when authenticated.
# Unauthenticated users are still able to join meetings through invites.
# DISABLE_GUEST_ACCESS=false

# Comment this out to send logs to STDOUT in production instead of log/production.log .
DISABLE_RAILS_LOG_TO_STDOUT=true
